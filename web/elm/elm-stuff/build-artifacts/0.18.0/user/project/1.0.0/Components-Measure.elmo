var _user$project$Components_Measure$updateWeight = F3(
	function (measures, name, val) {
		var updateMeasure = function (measure) {
			return _elm_lang$core$Native_Utils.eq(measure.attribute, name) ? _elm_lang$core$Native_Utils.update(
				measure,
				{weight: val}) : measure;
		};
		return A2(_elm_lang$core$List$map, updateMeasure, measures);
	});
var _user$project$Components_Measure$update = F2(
	function (_p0, measures) {
		var _p1 = _p0;
		var updatedMeasures = A3(
			_user$project$Components_Measure$updateWeight,
			measures,
			_p1._0,
			A2(
				_elm_lang$core$Result$withDefault,
				5,
				_elm_lang$core$String$toInt(_p1._1)));
		return {ctor: '_Tuple2', _0: updatedMeasures, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _user$project$Components_Measure$primePrice = F3(
	function (weight, products, product) {
		var minRange = 100;
		var prices = A2(
			_elm_lang$core$List$map,
			function (product) {
				return product.price;
			},
			products);
		var min = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (next, min) {
					return (_elm_lang$core$Native_Utils.cmp(next, min) < 0) ? next : min;
				}),
			999999,
			prices);
		var max = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (next, max) {
					return (_elm_lang$core$Native_Utils.cmp(next, max) > 0) ? next : max;
				}),
			-99999,
			prices);
		var range = (_elm_lang$core$Native_Utils.cmp(max - min, minRange) < 0) ? minRange : (max - minRange);
		return (((max - product.price) / range) * 10) * _elm_lang$core$Basics$toFloat(weight);
	});
var _user$project$Components_Measure$primeReliability = F3(
	function (weight, products, product) {
		return _elm_lang$core$Basics$toFloat(weight) * product.reliability;
	});
var _user$project$Components_Measure$Model = F4(
	function (a, b, c, d) {
		return {label: a, attribute: b, weight: c, primeFunc: d};
	});
var _user$project$Components_Measure$initialMeasures = {
	ctor: '::',
	_0: A4(_user$project$Components_Measure$Model, 'Reliability', 'reliability', 5, _user$project$Components_Measure$primeReliability),
	_1: {
		ctor: '::',
		_0: A4(_user$project$Components_Measure$Model, 'Price', 'price', 5, _user$project$Components_Measure$primePrice),
		_1: {ctor: '[]'}
	}
};
var _user$project$Components_Measure$Changed = F2(
	function (a, b) {
		return {ctor: 'Changed', _0: a, _1: b};
	});
var _user$project$Components_Measure$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('row'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('row'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('col-sm-10'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(model.label),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('col-sm-2'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(model.weight)),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('row'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('col-sm-12'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$input,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('range'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$min('0'),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$max('10'),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$step('1'),
													_1: {
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$value(
															_elm_lang$core$Basics$toString(model.weight)),
														_1: {
															ctor: '::',
															_0: _elm_lang$html$Html_Events$onInput(
																_user$project$Components_Measure$Changed(model.attribute)),
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
